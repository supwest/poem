import numpy as np
import pandas as pd
from collections import defaultdict, Counter


class Vocab(object):
    '''
    Vocab stores the words and their distributions to be used 
    in writing a poem

    '''

    def __init__(self, infile):
        self.word_source = self.make_word_source(infile)
        #self.word_count = Counter()
        self.word_count = self.get_word_count()
        self.next_words = defaultdict(dict)

    def make_word_source(self, infile):
        with open(infile) as f:
            return f.read()

    def add_next_word(self, current_word, next_word):
        if next_word in self.next_words[current_word]:
            self.next_words[current_word][next_word] += 1
        else:
            self.next_words[current_word][next_word] = 1
    def get_word_count(self):
        word_count = Counter(self.word_source.lower().split())
        return word_count
    
    def update_word_count(self, current_word):
        self.word_count[current_word] += 1

    

class Poem(object):
    '''
    Poem class uses Vocab class to build a poem

    '''

    def __init__(self, vocab):
        self.poem = []
        self.length = 0
        self.vocab = vocab

    def choose_first_word(self, vocab):
        first_word = None
        word_list = [k for k in vocab.word_count]
        while first_word is None:

            new_word = np.random.choice(word_list)
            #print "first word new word is", new_word
            if new_word in vocab.next_words:
                first_word = new_word
        self.write_word(first_word)
        self.length += 1
        return first_word

    def choose_new_word(self, vocab):
        new_word = None
        current_word = self.poem[-1]
        #print "current word is ", current_word
        possible_words = [k for k in vocab.next_words[current_word]]
        possible_words_counts = np.array([vocab.next_words[current_word][k] for k in possible_words])
        #print possible_words
        #print possible_words_counts
        possible_words_probs = np.true_divide(possible_words_counts, np.sum(possible_words_counts))
        while new_word is None:
            #print 'new-word is', new_word
            new_next_word = np.random.choice(possible_words, p=possible_words_probs)
            #print 'new_next_word is ', new_next_word
            #print vocab.next_words[new_next_word]
            if len(vocab.next_words[new_next_word]) > 0:
                #print 'entered if statement'
                new_word = new_next_word
                self.write_word(new_word)
                self.length += 1
            else:
                new_word = self.choose_first_word(vocab)
                #print new_word
                #print "entered else statement"
        #self.write_word(new_word)
        
    def write_word(self, word):
        self.poem.append(word)



def get_lines():
    infile= 'poem1.txt'
    with open(infile) as f:
        g = f.read()
        words = Counter(g.lower().split())
        #text = [row.lower() for row in f]
        #text = "5"
        #words = Counter([row.split() for row in g])
    with open(infile) as f:
        text = [row.lower().strip() for row in f]
    #print text
    #print words
    #print num
    return text, words

def get_next_words(lines):
    next_word = defaultdict(dict)
    for line in lines:
        words = line.split()
        #print words
        num_words = len(words)
        for idx, word in enumerate(words):
            #temp = defaultdict(int)
            #print idx, word
            if idx < num_words -1:
                if words[idx+1] in next_word[word]:
                   next_word[word][words[idx+1]] += 1
                   #print "a", next_word[word]
                else:
                    next_word[word][words[idx+1]] = 1
                    #print "b", next_word[word]
            else:
                if '.' in next_word[word]:
                    #next_word[word]['.'] += 1
                    #print "c", next_word[word]
                    pass
                else:
                    #next_word[word]['.'] = 1
                    #print "d", next_word[word]
                    pass
    #print next_word

    return next_word
    

if __name__ == '__main__':
    lines, word_counts = get_lines()
    #print lines
    #print word_nums
    #clean_lines = get_clean_lines()
    next_words = defaultdict(dict)
    word_count = defaultdict(int)
    num_lines = defaultdict(int)
    num_words = defaultdict(int)
    #words_per_line = defaultdict(int)
    next_words = get_next_words(lines)
    infile = 'poem1.txt'
    vocabulary = Vocab(infile)
    with open('poem1.txt') as f:
        text = [row.lower().split() for row in f]
    #print vocabulary.word_count
    for line in text:
        #print line
        #words = line.split()
        next_words = defaultdict(int)
        num_words = len(line)
        for idx, word in enumerate(line):
            if idx < num_words -1:
                vocabulary.add_next_word(word, line[idx+1])
                #if words[idx+1] in vocabulary.next_words[word]:
                #    vocabular.next_words[word]

    #print"vocabulary words", vocabulary.next_words

    poem = Poem(vocabulary) 
    #print "poem"
    #print word_counts
    poem.choose_first_word(vocabulary)
    poem_length = 0 
    p_length = np.random.randint(10,19)
    print p_length
    while poem.length < p_length :
        poem.choose_new_word(vocabulary)
        #print poem.length
        poem_length += 1
    
    #print poem
    #num_words = sum([word_counts[k] for k in word_counts])
    #word_list = [k for k in word_counts]
    #print word_list
    #print num_words
    #word_probs = np.array([np.true_divide(word_counts[k], num_words) for k in word_counts])
    #print zip(word_list, word_probs)
    #print next_words
    #first_word = np.random.choice(word_list, p=word_probs)
    #poem.append(first_word)
    #print "poem is", poem
    #print next_words[first_word]
    #old_word=first_word
    #while poem_length < 25:
    #    num_words = sum([next_words[old_word][k] for k in next_words[old_word]])
    #    print "next words of old word", next_words[old_word]
    #    new_word_probs = np.array([np.true_divide(next_words[old_word][k], num_words)])
    #    possible_words = [k for k in next_words[old_word]]
        #print num_words
        #print new_word_probs
        #print next_words[old_word]
    #    print "len new word probs", len(new_word_probs)
    #    print "len possible_words",len(possible_words)
    #    new_word = np.random.choice(possible_words, p=new_word_probs)

    #   poem.append(new_word)
    #    old_word=new_word
    #    poem_length += 1


    print " ".join(poem.poem)

